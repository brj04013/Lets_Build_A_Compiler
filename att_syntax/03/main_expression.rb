#!/usr/bin/env ruby
require_relative "cradle.rb"
include Cradle

main = Cradle.init
print(".data")
emitln("")
emitln("")
emitln("msg:")
emitln("\t.ascii " + '"Result = "')
emitln("\tlen_msg = . - msg")
emitln("char_neg:")
emitln("\t.ascii " + '"-"')
emitln("\tlen_char_neg = . - char_neg")                
emitln("newline:")
emitln("\t.ascii "+ '"\n"')
emitln("result:")
emitln("\t.long 0")
emitln("positive:")
emitln("\t.long 0")              
emitln("digits:")
emitln("\t.long 0")
emitln("")
print(".text")
emitln("")
emitln("")
emitln(".global _start")
emitln("")
print("_start:")
emitln("")
emitln("")
emitln("movl $4, %eax						# print 'Result ='")
emitln("movl $1, %ebx")
emitln("movl $msg, %ecx")
emitln("movl $len_msg, %edx")
emitln("int $0x80")
emitln("")
emitln("#### Begin From Let's Build A Compiler")
main.expression        
emitln("#### End From Let's Build A Compiler")
emitln("")
emitln("movl $1, positive					# initialize positive number yes")
emitln("")
emitln("cmpl $0, %eax						# if greater or equals 0 is positive")
emitln("jge positive_number")
emitln("")
emitln("movl $0, positive					# else is negative")
emitln("negl %eax")
emitln("")
print("positive_number:")
emitln("")
emitln("")
emitln("movl $0, digits						# number of digits")
emitln("")
print("loop:")
emitln("")
emitln("")
emitln("pushl %eax							# divide for 10")
emitln("movl $10,%eax")
emitln("movl %eax,%ecx")
emitln("popl %eax")
emitln("xorl %edx,%edx")
emitln("idivl %ecx")
emitln("")
emitln("pushl %edx							# store the remainder in reverse order")
emitln("")
emitln("addl $1, digits						# number of digits")
emitln("")
emitln("cmpl $0, %eax						# if equals quotient 0")
emitln("je end")
emitln("") 
print("jmp loop")
emitln("")
emitln("")
print("end:")
emitln("")
emitln("")
emitln("cmpl $1, positive					# if is positive number")
emitln("je loop1")
emitln("")
emitln("movl $4, %eax						# else print the '-' char")
emitln("movl $1, %ebx")
emitln("movl $char_neg, %ecx")
emitln("movl $len_char_neg, %edx")
emitln("int $0x80")
emitln("")
print("loop1:")
emitln("")
emitln("")
emitln("popl %eax							# retrieve the remainders in correct order")
emitln("")
emitln("addl $0x30, %eax					# number between 0 and 9")
emitln("movl %eax, result")
emitln("")
emitln("movl $4, %eax						# print the digits")
emitln("movl $1, %ebx")
emitln("movl $result, %ecx")
emitln("movl $1, %edx")
emitln("int $0x80")
emitln("")
emitln("decl digits							# if digits 0 end")
emitln("cmpl $0, digits")
emitln("je end1")
emitln("")
print("jmp loop1")
emitln("")
emitln("")
print("end1:")
emitln("")
emitln("")
emitln("movl $4, %eax						# print new line")
emitln("movl $1, %ebx")
emitln("movl $newline, %ecx")
emitln("movl $1, %edx")
emitln("int $0x80")
emitln("")
emitln("movl $1, %eax						# exit")
emitln("movl $0, %ebx")
emitln("int $0x80")
if $Look =~ /[\r]/
	$i += 1
	$Look = $Expr[$i]
	if $Look =~ /[\n]/
		nil
	end
elsif $Look =~ /[\n]/
	nil
else
	Cradle.expected('Newline')
end
